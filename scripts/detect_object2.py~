#! /usr/bin/env python2.7

import roslib
roslib.load_manifest('baxter_demos')
import sys
import os
from optparse import OptionParser
import rospy
import sensor_msgs.msg
from cv_bridge import CvBridge
#import cv
import cv2
import numpy as np
#import scipy.ndimage.morphology as morphology
from baxter_demos.msg import obj_relations,obj_hypotheses
import visualization_msgs.msg
from geometry_msgs.msg import Pose,Point
import colorsys
#from geometry_msgs.msg import Pose,Point


import numpy as np
import cv2

global x,y
x={}
y={}

if __name__ == '__main__':

    br = CvBridge()	# Create a black image, a window

#--------------------------------------------------------------------------------------#
    def detect_and_draw(imgmsg):
	global x,y

        img = br.imgmsg_to_cv2(imgmsg, desired_encoding="passthrough")
	img = img[:,:,0:3]
	fgmask = fgbg.apply(img)

	cv2.imshow('rgb',img)
	#cv2.imshow('frame',fgmask)
	img1_bg = cv2.bitwise_and(img,img,mask = fgmask)
	img_obj = img.copy()
	for i in range(len(x)):
		print i
		img_obj[y[i],x[i],:] = [255,0,0]
	cv2.imshow('object',img_obj)
	cv2.imshow('masked',img1_bg)
	k = cv2.waitKey(1) & 0xff




#--------------------------------------------------------------------------------------#


    fgbg = cv2.BackgroundSubtractorMOG()
    rospy.init_node('object_detection')
    #rospy.loginfo('Object relations running..')
    #image_topic = rospy.resolve_name("/camera/rgb/image_color") 
    #depth_topic = '/camera/depth_registered/hw_registered/image_rect_raw'
    #RH_image_topic = rospy.resolve_name("/cameras/right_hand_camera/image")
    LH_image_topic = rospy.resolve_name("/cameras/left_hand_camera/image")
    #object_topic = rospy.resolve_name("/object_recognition_2/tabletop/clusters") 

    rospy.Subscriber(LH_image_topic, sensor_msgs.msg.Image, detect_and_draw)
    #rospy.Subscriber(depth_topic, sensor_msgs.msg.Image, detect_and_draw_depth)
    #rospy.Subscriber(RH_image_topic, sensor_msgs.msg.Image, RH_image)
    #rospy.Subscriber(LH_image_topic, sensor_msgs.msg.Image, LH_image)
    #rospy.Subscriber(object_topic, visualization_msgs.msg.MarkerArray, objects)

    #pub = rospy.Publisher('obj_relations', obj_relations, queue_size=1)
    #rospy.Subscriber('/obj_hypotheses', obj_hypotheses, hypotheses)
    #talker()

    rospy.spin()



